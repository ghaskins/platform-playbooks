- name: Delete EC2 environment
  gather_facts: false
  hosts: awsctl_host
  roles:
    - python
  tasks:
    - name: Delete DNS on Route53
      when:
        - aws_route53_zone is defined
        - manetu_dns is defined
      amazon.aws.route53:
        state: absent
        zone: "{{ aws_route53_zone }}"
        record: "{{ manetu_dns }}"
        type: A

    - name: Lookup EC2 instance
      delegate_to: localhost
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name":  "{{ aws_instance_name }}"
      register: ec2

    - name: Delete EC2 instance
      when: ec2.instances | default([]) | length
      delegate_to: localhost
      amazon.aws.ec2_instance:
        region: "{{ aws_region }}"
        instance_ids:
          - "{{ item.instance_id }}"
        state: absent
        wait: true
      loop: "{{ ec2.instances | list }}"

    - name: Delete SecurityGroup
      amazon.aws.ec2_security_group:
        state: absent
        name: "{{ aws_instance_name }}"
        region: "{{ aws_region }}"

    - name: Discover vpc_id
      amazon.aws.ec2_vpc_net_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ aws_instance_name }}"
      register: vpc

    - name: Update vpc_ids
      set_fact:
        vpc_ids: "{{ vpc.vpcs | map(attribute='vpc_id') }}"

    - name: Discover route tables
      amazon.aws.ec2_vpc_route_table_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ item }}"
          "tag:Name": "{{ aws_instance_name }}"
      loop: "{{ vpc_ids }}"
      register: route_tables

    - name: Update route_table_ids
      set_fact:
        route_table_ids: "{{ route_tables.results | map(attribute='route_tables') | flatten | map(attribute='route_table_id')}}"

    - name: Delete Route Table
      amazon.aws.ec2_vpc_route_table:
        state: absent
        region: "{{ aws_region }}"
        lookup: id
        route_table_id: "{{ item }}"
      loop: "{{ route_table_ids }}"

    - name: Delete Internet gateway
      amazon.aws.ec2_vpc_igw:
        state: absent
        region: "{{ aws_region }}"
        vpc_id: "{{ item }}"
      loop: "{{ vpc_ids }}"

    - name: Discover subnets
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ item }}"
      loop: "{{ vpc_ids }}"
      register: subnets

    - name: Update subnets
      set_fact:
        subnets: "{{ subnets.results | map(attribute='subnets') | flatten }}"

    - name: Delete subnets
      amazon.aws.ec2_vpc_subnet:
        state: absent
        region: "{{ aws_region }}"
        vpc_id: "{{ item.vpc_id }}"
        cidr: "{{ item.cidr_block }}"
        wait: true
      loop: "{{ subnets }}"

    - name: Delete VPC
      amazon.aws.ec2_vpc_net:
        state: absent
        name: "{{ aws_instance_name }}"
        region: "{{ aws_region }}"
        vpc_id: "{{ item }}"
      loop: "{{ vpc_ids }}"
